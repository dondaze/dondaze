#include <stdio.h>
#include <stdlib.h>

typedef struct _dbllistnode
{
    int  item;
	struct _dbllistnode *next;
	struct _dbllistnode *pre;
} CDblListNode;

typedef struct _dbllinkedlist{
   int size;
   CDblListNode *head;
} CDblLinkedList;

void insertNode_AtFront(CDblLinkedList *ptrCDLL, int value);
void deleteList(CDblLinkedList *ptrCDLL);
void printList(CDblLinkedList CDLL);

int numMountainPairs(CDblLinkedList CDLL);

int main()
{
    CDblLinkedList himalayas;
    himalayas.head = NULL;
    himalayas.size = 0;

    int item;
    int i,cases;
    int numP;
    scanf("%d",&cases);
    for(i=0; i<cases; i++)
    {
        while(scanf("%d",&item))
            insertNode_AtFront(&himalayas, item);
        scanf("%*s");

        numP = numMountainPairs(himalayas);
        printList(himalayas);
        printf("%d Pairs.\n",numP);

        deleteList(&himalayas);
    }
    return 0;
}

void insertNode_AtFront(CDblLinkedList *ptrCDLL, int value){
      //create a new node
      CDblListNode* newNode;
      newNode = (CDblListNode *) malloc(sizeof(CDblListNode));
      newNode->item = value;

      if(ptrCDLL->size==0) //first node
      {
          newNode->next = newNode;
          newNode->pre = newNode;
          ptrCDLL->head = newNode;
      }
      else{
        newNode->next = ptrCDLL->head;
        newNode->pre = ptrCDLL->head->pre;

        newNode->pre->next = newNode; //update last node next link;
        ptrCDLL->head->pre = newNode;

        ptrCDLL->head = newNode;
      }
      ptrCDLL->size++;
}

void printList(CDblLinkedList CDLL){

    if(CDLL.head==NULL) return;

    CDblListNode* temp = CDLL.head;
    printf("Current List: ");

    while (temp->next != CDLL.head){
        printf("%d ", temp->item);
        temp = temp->next;

    }
    printf("%d\n",temp->item);
}

void deleteList(CDblLinkedList *ptrCDLL){
    if(ptrCDLL->head==NULL) return;
    CDblListNode *cur = ptrCDLL->head;
    CDblListNode *temp;

    while (cur->next!= ptrCDLL->head) {
        temp=cur->next;
        free(cur);
        cur=temp;
    }

    free(cur);
    ptrCDLL->head =NULL;
    ptrCDLL->size =0;

}



int numMountainPairs(CDblLinkedList CDLL)
{
// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail


// Write your code here
    CDblListNode *cur = CDLL.head;
    CDblListNode *A = cur;
    CDblListNode *B = cur->next;
    CDblListNode *mid;

    int size = CDLL.size;
    int i, max;
    int nopair1, nopair2;
    int pair = size;

    if(size < 2)
        return 0;

    if(size == 2)
        return 1;

    while(1)
    {
        for (i=1; i<size-2; i++)
        {
            B = B->next;

            if (B==cur)
                break;

            nopair1 = 1;
            mid     = A->next;
            max     = 0;

            while(B != mid)
            {
                if (mid->item > max)
                    max = mid->item;

                if (max>A->item || max>B->item)
                    nopair1 = 0;

                mid = mid->next;
            }

            nopair2 = 1;
            mid     = B->next;
            max     = 0;

            while(A != mid)
            {
                if (mid->item > max)
                    max = mid->item;

                if (max>A->item || max>B->item)
                    nopair2 = 0;

                mid = mid->next;
            }

            if (nopair1 == 1 || nopair2 == 1)
                pair++;
        }

        A = A->next;
        B = A->next;

        if (B==cur)
            break;
    }

    return pair;
}
